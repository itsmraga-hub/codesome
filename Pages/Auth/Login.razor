@page "/login"
@layout MainLayout
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json
@using codesome.Authentication
@using codesome.Data.Services.Users
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IUserService _userService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage


<PageTitle>Login</PageTitle>

<MudGrid>
    <MudItem>
        <MudText Typo="Typo.h4"><MudNavLink Href="/" Match="NavLinkMatch.Prefix">Codesome</MudNavLink></MudText>
        <MudText Typo="Typo.h4">Login</MudText>
    </MudItem>
</MudGrid>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegisterAccountForm model = new RegisterAccountForm();

    public class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; } = "";
    }

    private async void OnValidSubmit(EditContext context)
    {
        var res = await _userService.AuthenticateUser(model.Email, model.Password);
        if (res.IsAuthenticated == false)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Invalid email or password. Please try again.");
            // FailedLogin("Invalid email or password. Please try again.", "top-center");
            return;
        };
        Console.WriteLine(JsonConvert.SerializeObject(res));
        Console.WriteLine(JsonConvert.SerializeObject(res));
        Console.WriteLine(JsonConvert.SerializeObject(res));
        var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var user = await customAuthenticationStateProvider!.UpdateAuthenticationState(res);
        // await LocalStorage.SetItemAsync("uid", user.Id);
        if (user.IsAuthenticated)
            NavigationManager.NavigateTo("/");

        await LocalStorage.SetItemAsync("__id", user.Id);
        
    }

    void FailedLogin(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Error, config => { config.VisibleStateDuration = 3000; });
    }

}