@page "/tags/new"
@attribute [Authorize(Roles = "Administrator,Instructor")]
<PageTitle>Courses</PageTitle>

@using Newtonsoft.Json
@using codesome.Authentication
@using codesome.Data
@using codesome.Data.Courses
@using codesome.Data.Models
@using codesome.Data.Services;
@using codesome.Data.Services.Courses
@using codesome.Data.Services.Users
@inject AuthenticationStateProvider authenticationStateProvider
@inject IUserService _userService
@inject ILocalStorageService _localStorage
@inject ICoursesService _coursesService
@inject ITagsService _tagsService
@inject NavigationManager NavigationManager
@inject ISnackbar SnackbarService

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem>
                <MudText Typo="Typo.h4"><MudNavLink Href="/" Match="NavLinkMatch.Prefix">Codesome</MudNavLink></MudText>
                <MudText Typo="Typo.h4">Add Tag</MudText>
            </MudItem>
        </MudGrid>
        <EditForm Model="@tag" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" sm="12">
                                    <MudTextField Label="Tag Name"
                                                  @bind-Value="tag.Name" For="@(() => tag.Name)" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Tag</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@if (isCreating)
{
    <p><em>Creating...</em></p>
}

@code {
    private Tag tag = new Tag();
    private bool isCreating = false;

    private async void OnValidSubmit(EditContext context)
    {
        await CreateTag();
    }
    private async Task CreateTag()
    {
        try
        {
            isCreating = true;
            // Get the current user's ID
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var uid = await _localStorage.GetItemAsync<string>("__id");
            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
            var userSession = await customAuthenticationStateProvider.GetAuthenticatedUser();

            tag.CreatedBy = uid!;

            var res = await _tagsService.CreateTagAsync(tag);
            if (res.Id.Length > 0)
            {
                OnClick();
                NavigationManager.NavigateTo("/tags");
            }
            // Optionally, you can navigate to the "Courses" page after creating the course

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            // Handle any exceptions (e.g., display an error message)
        }
        finally
        {
            isCreating = false;
        }
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private void OnClick()
    {
        // We'll set all three of these snackbars to prevent duplicates and give them
        // all the same key ("mudblazor")
        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            options.VisibleStateDuration = 1000;

        };

        SnackbarService.Add("Created Successfully.", Severity.Success, config => { config.HideIcon = true; });
    }
}
