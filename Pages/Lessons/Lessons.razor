@page "/lessons"

@attribute [Authorize]
<PageTitle>Courses</PageTitle>

@using codesome.Data
@using codesome.Data.Courses
@using codesome.Data.Models
@using codesome.Data.Services.Lessons
@using codesome.Data.Services.Courses
@inject ILessonsService _lessonsService
@using System.Net.Http.Json
@inject HttpClient httpClient

<h1>Lessons</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (lessons == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@lessons">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lessons</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Sign</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Position</MudTh>
            <MudTh>Molar mass</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Course.Title</MudTd>
            <MudTd DataLabel="Sign">@context.Order</MudTd>
            <MudTd DataLabel="Name">@context.CourseId</MudTd>
            <MudTd DataLabel="Position">@context.Description</MudTd>
            <MudTd DataLabel="Molar mass">@context.Duration</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                           RowsPerPageString="@rowsPerPageString"
                           InfoFormat="@infoFormat"
                           AllItemsText="@allItemsText"
                           HorizontalAlignment="@horizontalAlignment"
                           HideRowsPerPage="@hideRowsPerPage"
                           HidePageNumber="@hidePageNumber"
                           HidePagination="@hidePagination" />
        </PagerContent>
    </MudTable>
}

@code {
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    private List<Lesson> lessons = new List<Lesson>();

    protected override async Task OnInitializedAsync()
    {
        var res = await _lessonsService.GetLessonsAsync();
        if (res != null)
        {
            lessons = res;
        }
    }
}