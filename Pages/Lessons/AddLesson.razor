@page "/lessons/new"
@attribute [Authorize(Roles = "Administrator,Instructor")]

<PageTitle>Create Lesson</PageTitle>

@using Newtonsoft.Json
@using codesome.Data
@using codesome.Data.Courses
@using codesome.Data.Models
@using codesome.Data.Services.Lessons
@using codesome.Data.Services.Courses
@inject ILessonsService _lessonsService
@inject ICoursesService _coursesService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ILocalStorageService _localStorage

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem>
                <MudText Typo="Typo.h4"><MudNavLink Href="/" Match="NavLinkMatch.Prefix">Codesome</MudNavLink></MudText>
                <MudText Typo="Typo.h4">Create Lesson</MudText>
            </MudItem>
        </MudGrid>
        <EditForm Model="@lesson" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" sm="12">
                                    <MudTextField Label="Lesson Title" HelperText="Max. 8 characters"
                                                  @bind-Value="lesson.Title" For="@(() => lesson.Title)" />
                                </MudItem>
                                <MudItem xs="12" sm="12">
                                    <MudTextField Label="Lesson VideoURL" HelperText="Lesson Video URL"
                                                     @bind-Value="lesson.VideoUrl" For="@(() => lesson.VideoUrl)" />
                                </MudItem>
                                <MudItem xs="12" sm="12">
                                    <MudTextField Label="Lesson Description" HelperText="Lesson Description"
                                                  @bind-Value="lesson.Description" For="@(() => lesson.Description)" />
                                </MudItem>
                                <MudItem xs="12" sm="12">
                                <MudNumericField Label="Duration" HelperText="video duration"
                                @bind-Value="lesson.Duration" For="@(() => lesson.Duration)" />
                                </MudItem>
                                
                                @* <MudItem xs="12" sm="4">
                                <MudDatePicker Label="Date of Birth"
                                DateFormat="dd-MM-yyyy"
                                IsDateDisabledFunc="@((DateTime dt)=>((int)dt.Year > DateTime.Now.Year - 4))" />
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                <MudTextField Label="Email" Class="mt-3"
                                @bind-Value="model.Email" For="@(() => model.Email)" />
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                <MudTextField Label="Confirmation Password" HelperText="Confirm password" Class="mt-3"
                                @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                                </MudItem> *@
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create Course</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@if (isCreating)
{
    <p><em>Creating...</em></p>
}

@code {
    private Lesson lesson = new Lesson();
    // private List<Course> courses = new List<Course>();
    private bool isCreating = false;
    private Course course = new Course();

    [Parameter]
    public string? courseId { get; set; }
    public string userId = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(JsonConvert.SerializeObject(courseId));
        var res = await _coursesService.GetCourseAsync(courseId!);
        if (res != null)
        {
            course = res;
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        await CreateLesson();
    }

    private async Task CreateLesson()
    {
        try
        {
            var uid = await _localStorage.GetItemAsync<string>("__id");
            // lesson.AuthorID = uid;
            isCreating = true;
            lesson.CourseId = course.Id;
            lesson.Order = 0;
            // lesson.Course = course;
            Console.WriteLine(JsonConvert.SerializeObject(lesson));
            await _lessonsService.CreateLessonAsync(lesson);
            // Optionally, you can navigate to the "Courses" page or display a success message
            NavigationManager.NavigateTo("/courses");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            // Handle any exceptions (e.g., display an error message)
        }
        finally
        {
            isCreating = false;
        }
    }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}
