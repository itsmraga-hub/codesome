@page "/enrollments"
@attribute [Authorize(Roles = "Administrator,Instructor,Student")]

<PageTitle>Courses</PageTitle>

@using Newtonsoft.Json
@using codesome.Data
@using codesome.Data.Courses
@using codesome.Data.Models
@using codesome.Data.Services;
@using codesome.Data.Services.Courses
@using codesome.Data.Services.Enrollments
@inject ICoursesService _coursesService
@inject IStudentEnrollmentService _studentEnrollmentService
@inject IDialogService DialogService
@inject ILocalStorageService _LocalStorage


@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudTable Items="@enrollments">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Enrollments</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>DateEnrolled</MudTh>
            <MudTh>Percentage done</MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Course.Title</MudTd>
            <MudTd DataLabel="Sign">@context.DateEnrolled</MudTd>
            <MudTd DataLabel="Sign">0%</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                           RowsPerPageString="@rowsPerPageString"
                           InfoFormat="@infoFormat"
                           AllItemsText="@allItemsText"
                           HorizontalAlignment="@horizontalAlignment"
                           HideRowsPerPage="@hideRowsPerPage"
                           HidePageNumber="@hidePageNumber"
                           HidePagination="@hidePagination" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Course> courses = new List<Course>();
    private List<StudentEnrollment> enrollments = new List<StudentEnrollment>();
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    private string userID = null!;
    protected override async Task OnInitializedAsync()
    {
        var uID = await _LocalStorage.GetItemAsync<string>("__id");
        userID = uID!;
        var res = await _studentEnrollmentService.GetStudentEnrollmentsAsync(uID!);
        if (res != null)
        {
            enrollments = res.ToList();
        }
    }

    void Enroll(string id)
    {
        if (userID != null)
        {
            var res = _studentEnrollmentService.EnrollStudentAsync(new StudentEnrollment()
                {
                    CourseId = id,
                    StudentId = userID
                });

            if (res != null)
            {
                Console.WriteLine("Enrolled");
            }
            else
            {
                Console.WriteLine("Not Enrolled");
            }
        }
        else
        {
            Console.WriteLine("Not Enrolled");
        };
    }


}
