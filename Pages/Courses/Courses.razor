@page "/courses"
@attribute [Authorize(Roles = "Administrator,Instructor,Student")]

<PageTitle>Courses</PageTitle>

@using Newtonsoft.Json
@using codesome.Data
@using codesome.Data.Courses
@using codesome.Data.Models
@using codesome.Data.Services;
@using codesome.Data.Services.Courses
@using codesome.Data.Services.Enrollments
@inject ICoursesService _coursesService
@inject IStudentEnrollmentService _studentEnrollmentService

@inject ILocalStorageService _LocalStorage


<h1>Courses</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@courses">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Courses</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>StartDate</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Author</MudTh>
            <MudTh>Enroll</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Title</MudTd>
            <MudTd DataLabel="Sign">@context.StartDate</MudTd>
            <MudTd DataLabel="Name">@context.Price</MudTd>
            <MudTd DataLabel="Position">@context.Description</MudTd>
            <MudTd DataLabel="Molar mass">@context.Author</MudTd>
            <MudTd DataLabel="Molar mass">
                @if(userID != null)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => Enroll(context.Id)">Enroll</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">Enroll</MudButton>
                })
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                           RowsPerPageString="@rowsPerPageString"
                           InfoFormat="@infoFormat"
                           AllItemsText="@allItemsText"
                           HorizontalAlignment="@horizontalAlignment"
                           HideRowsPerPage="@hideRowsPerPage"
                           HidePageNumber="@hidePageNumber"
                           HidePagination="@hidePagination" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Course> courses = new List<Course>();
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    private string userID = null!;
    protected override async Task OnInitializedAsync()
    {
        var uID = await _LocalStorage.GetItemAsync<string>("__id");
        userID = uID!;
        var res = await _coursesService.GetCoursesAsync();
        if (res != null)
        {
            courses = res;
        }
    }

    void Enroll(int id)
    {
        Console.WriteLine("Enrolled");
        Console.WriteLine("Enrolled");
        
        Console.WriteLine(JsonConvert.SerializeObject(userID));
        if (userID != null)
        {
            var res = _studentEnrollmentService.EnrollStudentAsync(new StudentEnrollment()
            {
                CourseId = id,
                StudentId = userID
            });

            if (res != null)
            {
                Console.WriteLine("Enrolled");
            }
            else
            {
                Console.WriteLine("Not Enrolled");
            }
        }
        else
        {
            Console.WriteLine("Not Enrolled");
        };
    }
}
