@using codesome.Authentication
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                codesome
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="LogOut" Class="ml-auto">Logout</MudButton>
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen">
                <NavMenu />
            </MudDrawer>
            <MudMainContent Class="pa-2">
                @Body
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            <MudAppBar Elevation="4" Dense="true">
                <MudText Style="color: black">Codesome</MudText>
                <MudSpacer />

                <div class="d-flex flex-row align-center gap-6 justify-center">
                    <MudNavLink Href="/register" Match="NavLinkMatch.All">Register</MudNavLink>

                    <MudNavLink Href="/login" Match="NavLinkMatch.All">Login</MudNavLink>
                </div>
            </MudAppBar>
            <MudMainContent Class="pa-2">
                @Body
            </MudMainContent>
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private async Task LogOut()
    {
        var customAuthState = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await customAuthState.UpdateAuthenticationState(null!);
        NavigationManager.NavigateTo("/", true);
    }
}
